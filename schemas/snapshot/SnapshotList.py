# automatically generated by the FlatBuffers compiler, do not modify

# namespace: snapshot

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

class SnapshotList(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = SnapshotList()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsSnapshotList(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # SnapshotList
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # SnapshotList
    def Snapshots(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            x = self._tab.Vector(o)
            x += flatbuffers.number_types.UOffsetTFlags.py_type(j) * 4
            x = self._tab.Indirect(x)
            from schemas.snapshot.Snapshot import Snapshot
            obj = Snapshot()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # SnapshotList
    def SnapshotsLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # SnapshotList
    def SnapshotsIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        return o == 0

    # SnapshotList
    def Key(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # SnapshotList
    def Time(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int64Flags, o + self._tab.Pos)
        return 0

    # SnapshotList
    def Name(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

def SnapshotListStart(builder):
    builder.StartObject(4)

def Start(builder):
    SnapshotListStart(builder)

def SnapshotListAddSnapshots(builder, snapshots):
    builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(snapshots), 0)

def AddSnapshots(builder, snapshots):
    SnapshotListAddSnapshots(builder, snapshots)

def SnapshotListStartSnapshotsVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def StartSnapshotsVector(builder, numElems):
    return SnapshotListStartSnapshotsVector(builder, numElems)

def SnapshotListAddKey(builder, key):
    builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(key), 0)

def AddKey(builder, key):
    SnapshotListAddKey(builder, key)

def SnapshotListAddTime(builder, time):
    builder.PrependInt64Slot(2, time, 0)

def AddTime(builder, time):
    SnapshotListAddTime(builder, time)

def SnapshotListAddName(builder, name):
    builder.PrependUOffsetTRelativeSlot(3, flatbuffers.number_types.UOffsetTFlags.py_type(name), 0)

def AddName(builder, name):
    SnapshotListAddName(builder, name)

def SnapshotListEnd(builder):
    return builder.EndObject()

def End(builder):
    return SnapshotListEnd(builder)
